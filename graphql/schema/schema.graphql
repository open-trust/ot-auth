type DomainFederation {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  domain: String! @id @search(by: [hash]) # 联盟方可信域名
  description: String!
  allowedList: [String!]! # state > 0 的情况下有效，信任的联盟域的主体白名单，支持 * 匹配
  status: Int! # 联盟关系状态，0: 被信任 -> domain, 1: 信任 <- domain, 2: 双向信任 <-> domain, -1: 取消了联盟关系
}

type ServiceRegistry {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  subjectId: String! @search(by: [hash])
  subjectType: String!
  description: String!
  keys: [String!] # 存储的公钥 JWK 数组
  keysUpdatedAt: DateTime! # 存储的公钥更新时间
  status: Int! @search # 登记状态，-1 表示禁用
  serviceEndpoints: [String!]!
  permissions: [ServiceRegistryPermission!] @hasInverse(field: registry)
  uk: String! @id # 联合索引 Base64(SHA1(subjectType, subjectID))
}

type UserRegistry {
  id: ID!
  createdAt: DateTime! @search
  updatedAt: DateTime!
  subjectId: String! @search(by: [hash])
  subjectType: String!
  description: String!
  keys: [String!] # 存储的公钥 JWK 数组
  keysUpdatedAt: DateTime! # 存储的公钥更新时间
  status: Int! @search # 登记状态，-1 表示禁用
  releaseId: String! # 用户类可信主体登记的可信发布标识
  bundles: [UserRegistryBundle!] @hasInverse(field: registry) # 绑定的第三方 ID 数组
  uk: String! @id # 联合索引 Base64(SHA1(subjectType, subjectID))
}

type UserRegistryBundle {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  provider: ServiceRegistry! # 绑定的第三方 ID 服务提供方
  bundleId: String! @search(by: [hash]) # 绑定的第三方 ID
  extension: String!
  registry: UserRegistry! # 所属的用户类主体
  uk: String! @id # 联合索引 Base64(SHA1(subjectType, subjectID, bundleId))
}

type ServiceRegistryPermission {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  resource: String! # 资源名称
  operations: [String!]! # 操作名称数组
  extensions: [String!]! # 用于业务自定义逻辑的扩展数据
  registry: ServiceRegistry! # 所属的服务类主体
  uk: String! @id # 联合索引 Base64(SHA1(subjectType, subjectID, resource))
}
