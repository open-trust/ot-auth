// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package dgraph

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/client"
)

type Client struct {
	Client *client.Client
}

func NewClient(cli *http.Client, baseURL string, options ...client.HTTPRequestOption) *Client {
	return &Client{Client: client.NewClient(cli, baseURL, options...)}
}

type Query struct {
	GetDomainFederation            *DomainFederation            "json:\"getDomainFederation\" graphql:\"getDomainFederation\""
	QueryDomainFederation          []*DomainFederation          "json:\"queryDomainFederation\" graphql:\"queryDomainFederation\""
	GetServiceRegistry             *ServiceRegistry             "json:\"getServiceRegistry\" graphql:\"getServiceRegistry\""
	QueryServiceRegistry           []*ServiceRegistry           "json:\"queryServiceRegistry\" graphql:\"queryServiceRegistry\""
	GetUserRegistry                *UserRegistry                "json:\"getUserRegistry\" graphql:\"getUserRegistry\""
	QueryUserRegistry              []*UserRegistry              "json:\"queryUserRegistry\" graphql:\"queryUserRegistry\""
	GetUserRegistryBundle          *UserRegistryBundle          "json:\"getUserRegistryBundle\" graphql:\"getUserRegistryBundle\""
	QueryUserRegistryBundle        []*UserRegistryBundle        "json:\"queryUserRegistryBundle\" graphql:\"queryUserRegistryBundle\""
	GetServiceRegistryPermission   *ServiceRegistryPermission   "json:\"getServiceRegistryPermission\" graphql:\"getServiceRegistryPermission\""
	QueryServiceRegistryPermission []*ServiceRegistryPermission "json:\"queryServiceRegistryPermission\" graphql:\"queryServiceRegistryPermission\""
}

type Mutation struct {
	AddDomainFederation             *AddDomainFederationPayload             "json:\"addDomainFederation\" graphql:\"addDomainFederation\""
	UpdateDomainFederation          *UpdateDomainFederationPayload          "json:\"updateDomainFederation\" graphql:\"updateDomainFederation\""
	DeleteDomainFederation          *DeleteDomainFederationPayload          "json:\"deleteDomainFederation\" graphql:\"deleteDomainFederation\""
	AddServiceRegistry              *AddServiceRegistryPayload              "json:\"addServiceRegistry\" graphql:\"addServiceRegistry\""
	UpdateServiceRegistry           *UpdateServiceRegistryPayload           "json:\"updateServiceRegistry\" graphql:\"updateServiceRegistry\""
	DeleteServiceRegistry           *DeleteServiceRegistryPayload           "json:\"deleteServiceRegistry\" graphql:\"deleteServiceRegistry\""
	AddUserRegistry                 *AddUserRegistryPayload                 "json:\"addUserRegistry\" graphql:\"addUserRegistry\""
	UpdateUserRegistry              *UpdateUserRegistryPayload              "json:\"updateUserRegistry\" graphql:\"updateUserRegistry\""
	DeleteUserRegistry              *DeleteUserRegistryPayload              "json:\"deleteUserRegistry\" graphql:\"deleteUserRegistry\""
	AddUserRegistryBundle           *AddUserRegistryBundlePayload           "json:\"addUserRegistryBundle\" graphql:\"addUserRegistryBundle\""
	UpdateUserRegistryBundle        *UpdateUserRegistryBundlePayload        "json:\"updateUserRegistryBundle\" graphql:\"updateUserRegistryBundle\""
	DeleteUserRegistryBundle        *DeleteUserRegistryBundlePayload        "json:\"deleteUserRegistryBundle\" graphql:\"deleteUserRegistryBundle\""
	AddServiceRegistryPermission    *AddServiceRegistryPermissionPayload    "json:\"addServiceRegistryPermission\" graphql:\"addServiceRegistryPermission\""
	UpdateServiceRegistryPermission *UpdateServiceRegistryPermissionPayload "json:\"updateServiceRegistryPermission\" graphql:\"updateServiceRegistryPermission\""
	DeleteServiceRegistryPermission *DeleteServiceRegistryPermissionPayload "json:\"deleteServiceRegistryPermission\" graphql:\"deleteServiceRegistryPermission\""
}
type AddRegistrationForUserPayload struct {
	AddUserRegistry *struct {
		UserRegistry []*struct {
			ID            string    "json:\"id\" graphql:\"id\""
			CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			KeysUpdatedAt time.Time "json:\"keysUpdatedAt\" graphql:\"keysUpdatedAt\""
		} "json:\"userRegistry\" graphql:\"userRegistry\""
	} "json:\"addUserRegistry\" graphql:\"addUserRegistry\""
}
type AddRegistrationForServicePayload struct {
	AddServiceRegistry *struct {
		ServiceRegistry []*struct {
			ID            string    "json:\"id\" graphql:\"id\""
			CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
			UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
			KeysUpdatedAt time.Time "json:\"keysUpdatedAt\" graphql:\"keysUpdatedAt\""
		} "json:\"serviceRegistry\" graphql:\"serviceRegistry\""
	} "json:\"addServiceRegistry\" graphql:\"addServiceRegistry\""
}
type CheckHealth struct {
	QueryDomainFederation []*struct {
		Domain string "json:\"domain\" graphql:\"domain\""
		Status int    "json:\"status\" graphql:\"status\""
	} "json:\"queryDomainFederation\" graphql:\"queryDomainFederation\""
}
type GetUserVerificationInfo struct {
	GetUserRegistry *struct {
		Status    int      "json:\"status\" graphql:\"status\""
		ReleaseID string   "json:\"releaseId\" graphql:\"releaseId\""
		Keys      []string "json:\"keys\" graphql:\"keys\""
	} "json:\"getUserRegistry\" graphql:\"getUserRegistry\""
}
type GetServiceVerificationInfo struct {
	GetServiceRegistry *struct {
		Status           int      "json:\"status\" graphql:\"status\""
		Keys             []string "json:\"keys\" graphql:\"keys\""
		ServiceEndpoints []string "json:\"serviceEndpoints\" graphql:\"serviceEndpoints\""
	} "json:\"getServiceRegistry\" graphql:\"getServiceRegistry\""
}
type GetFederationVerificationInfo struct {
	GetDomainFederation *struct {
		Status      int      "json:\"status\" graphql:\"status\""
		AllowedList []string "json:\"allowedList\" graphql:\"allowedList\""
	} "json:\"getDomainFederation\" graphql:\"getDomainFederation\""
}
type GetUserBundles struct {
	GetUserRegistry *struct {
		Status  int "json:\"status\" graphql:\"status\""
		Bundles []*struct {
			BundleID string "json:\"bundleId\" graphql:\"bundleId\""
			Provider struct {
				SubjectID   string "json:\"subjectId\" graphql:\"subjectId\""
				SubjectType string "json:\"subjectType\" graphql:\"subjectType\""
			} "json:\"provider\" graphql:\"provider\""
		} "json:\"bundles\" graphql:\"bundles\""
	} "json:\"getUserRegistry\" graphql:\"getUserRegistry\""
}
type GetServicePermissions struct {
	GetServiceRegistry *struct {
		Status      int "json:\"status\" graphql:\"status\""
		Permissions []*struct {
			Resource   string   "json:\"resource\" graphql:\"resource\""
			Operations []string "json:\"operations\" graphql:\"operations\""
			Extensions []string "json:\"extensions\" graphql:\"extensions\""
		} "json:\"permissions\" graphql:\"permissions\""
	} "json:\"getServiceRegistry\" graphql:\"getServiceRegistry\""
}
type GetRegistrationForUser struct {
	GetUserRegistry *struct {
		CreatedAt     time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt     time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		SubjectID     string    "json:\"subjectId\" graphql:\"subjectId\""
		SubjectType   string    "json:\"subjectType\" graphql:\"subjectType\""
		Description   string    "json:\"description\" graphql:\"description\""
		Keys          []string  "json:\"keys\" graphql:\"keys\""
		KeysUpdatedAt time.Time "json:\"keysUpdatedAt\" graphql:\"keysUpdatedAt\""
		Status        int       "json:\"status\" graphql:\"status\""
	} "json:\"getUserRegistry\" graphql:\"getUserRegistry\""
}
type GetRegistrationForService struct {
	GetServiceRegistry *struct {
		CreatedAt        time.Time "json:\"createdAt\" graphql:\"createdAt\""
		UpdatedAt        time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
		SubjectID        string    "json:\"subjectId\" graphql:\"subjectId\""
		SubjectType      string    "json:\"subjectType\" graphql:\"subjectType\""
		Description      string    "json:\"description\" graphql:\"description\""
		Keys             []string  "json:\"keys\" graphql:\"keys\""
		KeysUpdatedAt    time.Time "json:\"keysUpdatedAt\" graphql:\"keysUpdatedAt\""
		Status           int       "json:\"status\" graphql:\"status\""
		ServiceEndpoints []string  "json:\"serviceEndpoints\" graphql:\"serviceEndpoints\""
	} "json:\"getServiceRegistry\" graphql:\"getServiceRegistry\""
}

const AddRegistrationForUserQuery = `mutation AddRegistrationForUser ($input: AddUserRegistryInput!) {
	addUserRegistry(input: [$input]) {
		userRegistry {
			id
			createdAt
			updatedAt
			keysUpdatedAt
		}
	}
}
`

func (c *Client) AddRegistrationForUser(ctx context.Context, input AddUserRegistryInput, httpRequestOptions ...client.HTTPRequestOption) (*AddRegistrationForUserPayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddRegistrationForUserPayload
	if err := c.Client.Post(ctx, AddRegistrationForUserQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const AddRegistrationForServiceQuery = `mutation AddRegistrationForService ($input: AddServiceRegistryInput!) {
	addServiceRegistry(input: [$input]) {
		serviceRegistry {
			id
			createdAt
			updatedAt
			keysUpdatedAt
		}
	}
}
`

func (c *Client) AddRegistrationForService(ctx context.Context, input AddServiceRegistryInput, httpRequestOptions ...client.HTTPRequestOption) (*AddRegistrationForServicePayload, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res AddRegistrationForServicePayload
	if err := c.Client.Post(ctx, AddRegistrationForServiceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const CheckHealthQuery = `query CheckHealth {
	queryDomainFederation(first: 1) {
		domain
		status
	}
}
`

func (c *Client) CheckHealth(ctx context.Context, httpRequestOptions ...client.HTTPRequestOption) (*CheckHealth, error) {
	vars := map[string]interface{}{}

	var res CheckHealth
	if err := c.Client.Post(ctx, CheckHealthQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetUserVerificationInfoQuery = `query GetUserVerificationInfo ($uk: String!, $includeKeys: Boolean!) {
	getUserRegistry(uk: $uk) {
		status
		releaseId
		keys @include(if: $includeKeys)
	}
}
`

func (c *Client) GetUserVerificationInfo(ctx context.Context, uk string, includeKeys bool, httpRequestOptions ...client.HTTPRequestOption) (*GetUserVerificationInfo, error) {
	vars := map[string]interface{}{
		"uk":          uk,
		"includeKeys": includeKeys,
	}

	var res GetUserVerificationInfo
	if err := c.Client.Post(ctx, GetUserVerificationInfoQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServiceVerificationInfoQuery = `query GetServiceVerificationInfo ($uk: String!, $includeKeys: Boolean!, $includeEndpoints: Boolean!) {
	getServiceRegistry(uk: $uk) {
		status
		keys @include(if: $includeKeys)
		serviceEndpoints @include(if: $includeEndpoints)
	}
}
`

func (c *Client) GetServiceVerificationInfo(ctx context.Context, uk string, includeKeys bool, includeEndpoints bool, httpRequestOptions ...client.HTTPRequestOption) (*GetServiceVerificationInfo, error) {
	vars := map[string]interface{}{
		"uk":               uk,
		"includeKeys":      includeKeys,
		"includeEndpoints": includeEndpoints,
	}

	var res GetServiceVerificationInfo
	if err := c.Client.Post(ctx, GetServiceVerificationInfoQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetFederationVerificationInfoQuery = `query GetFederationVerificationInfo ($uk: String!, $includeAllowed: Boolean!) {
	getDomainFederation(domain: $uk) {
		status
		allowedList @include(if: $includeAllowed)
	}
}
`

func (c *Client) GetFederationVerificationInfo(ctx context.Context, uk string, includeAllowed bool, httpRequestOptions ...client.HTTPRequestOption) (*GetFederationVerificationInfo, error) {
	vars := map[string]interface{}{
		"uk":             uk,
		"includeAllowed": includeAllowed,
	}

	var res GetFederationVerificationInfo
	if err := c.Client.Post(ctx, GetFederationVerificationInfoQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetUserBundlesQuery = `query GetUserBundles ($uk: String!) {
	getUserRegistry(uk: $uk) {
		status
		bundles {
			bundleId
			provider {
				subjectId
				subjectType
			}
		}
	}
}
`

func (c *Client) GetUserBundles(ctx context.Context, uk string, httpRequestOptions ...client.HTTPRequestOption) (*GetUserBundles, error) {
	vars := map[string]interface{}{
		"uk": uk,
	}

	var res GetUserBundles
	if err := c.Client.Post(ctx, GetUserBundlesQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetServicePermissionsQuery = `query GetServicePermissions ($uk: String!) {
	getServiceRegistry(uk: $uk) {
		status
		permissions {
			resource
			operations
			extensions
		}
	}
}
`

func (c *Client) GetServicePermissions(ctx context.Context, uk string, httpRequestOptions ...client.HTTPRequestOption) (*GetServicePermissions, error) {
	vars := map[string]interface{}{
		"uk": uk,
	}

	var res GetServicePermissions
	if err := c.Client.Post(ctx, GetServicePermissionsQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetRegistrationForUserQuery = `query GetRegistrationForUser ($uk: String!) {
	getUserRegistry(uk: $uk) {
		createdAt
		updatedAt
		subjectId
		subjectType
		description
		keys
		keysUpdatedAt
		status
	}
}
`

func (c *Client) GetRegistrationForUser(ctx context.Context, uk string, httpRequestOptions ...client.HTTPRequestOption) (*GetRegistrationForUser, error) {
	vars := map[string]interface{}{
		"uk": uk,
	}

	var res GetRegistrationForUser
	if err := c.Client.Post(ctx, GetRegistrationForUserQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}

const GetRegistrationForServiceQuery = `query GetRegistrationForService ($uk: String!) {
	getServiceRegistry(uk: $uk) {
		createdAt
		updatedAt
		subjectId
		subjectType
		description
		keys
		keysUpdatedAt
		status
		serviceEndpoints
	}
}
`

func (c *Client) GetRegistrationForService(ctx context.Context, uk string, httpRequestOptions ...client.HTTPRequestOption) (*GetRegistrationForService, error) {
	vars := map[string]interface{}{
		"uk": uk,
	}

	var res GetRegistrationForService
	if err := c.Client.Post(ctx, GetRegistrationForServiceQuery, &res, vars, httpRequestOptions...); err != nil {
		return nil, err
	}

	return &res, nil
}
